{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\n// Create the Axios instance with base URL for Discogs API\nconst api = axios.create({\n  baseURL: 'https://api.discogs.com'\n});\n\n// Add token interceptor\napi.interceptors.request.use(config => {\n  const token = 'sgSOwNnDMKJCOWpLLTdNccwHTAbGVrUZOXjLcqxl';\n  if (token) {\n    config.params = {\n      ...config.params,\n      // Retain existing params, if any\n      token: token // Add the token as a query parameter\n    };\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Custom hook to interact with Discogs API\nexport const useDiscogs = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to GET data\n  const getData = async endpoint => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.get(endpoint);\n      return response.data;\n    } catch (err) {\n      setError(err);\n      console.error(\"Error fetching data:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to PUT (update) data\n  const putData = async (endpoint, data = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.put(endpoint, data);\n      return response.data;\n    } catch (err) {\n      setError(err);\n      console.error(\"Error updating data:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to POST data\n  const postData = async (endpoint, data) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.post(endpoint, data);\n      return response.data;\n    } catch (err) {\n      setError(err);\n      console.error(\"Error posting data:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to DELETE data\n  const deleteData = async endpoint => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await api.delete(endpoint);\n      return response.data;\n    } catch (err) {\n      setError(err);\n      console.error(\"Error deleting data:\", err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    getData,\n    postData,\n    deleteData,\n    putData,\n    loading,\n    error\n  };\n};\n_s(useDiscogs, \"Iz3ozxQ+abMaAIcGIvU8cKUcBeo=\");","map":{"version":3,"names":["useState","axios","api","create","baseURL","interceptors","request","use","config","token","params","error","Promise","reject","useDiscogs","_s","loading","setLoading","setError","getData","endpoint","response","get","data","err","console","putData","put","postData","post","deleteData","delete"],"sources":["/Users/peytonhollenback/Cod3/Multi-Frontend-Discogs-Helper/react-front/src/utility/dataSource.js"],"sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\n\n// Create the Axios instance with base URL for Discogs API\nconst api = axios.create({\n    baseURL: 'https://api.discogs.com'\n});\n\n// Add token interceptor\napi.interceptors.request.use(\n    (config) => {\n        const token = 'sgSOwNnDMKJCOWpLLTdNccwHTAbGVrUZOXjLcqxl';\n        if (token) {\n            config.params = {\n                ...config.params, // Retain existing params, if any\n                token: token      // Add the token as a query parameter\n            };\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\n// Custom hook to interact with Discogs API\nexport const useDiscogs = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    // Function to GET data\n    const getData = async (endpoint) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await api.get(endpoint);\n            return response.data;\n        } catch (err) {\n            setError(err);\n            console.error(\"Error fetching data:\", err);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Function to PUT (update) data\n    const putData = async (endpoint, data = {}) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await api.put(endpoint, data);\n            return response.data;\n        } catch (err) {\n            setError(err);\n            console.error(\"Error updating data:\", err);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Function to POST data\n    const postData = async (endpoint, data) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await api.post(endpoint, data);\n            return response.data;\n        } catch (err) {\n            setError(err);\n            console.error(\"Error posting data:\", err);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Function to DELETE data\n    const deleteData = async (endpoint) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await api.delete(endpoint);\n            return response.data;\n        } catch (err) {\n            setError(err);\n            console.error(\"Error deleting data:\", err);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return {\n        getData,\n        postData,\n        deleteData,\n        putData,\n        loading,\n        error,\n    };\n};"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAG,0CAA0C;EACxD,IAAIA,KAAK,EAAE;IACPD,MAAM,CAACE,MAAM,GAAG;MACZ,GAAGF,MAAM,CAACE,MAAM;MAAE;MAClBD,KAAK,EAAEA,KAAK,CAAM;IACtB,CAAC;EACL;EACA,OAAOD,MAAM;AACjB,CAAC,EACAG,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEO,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMmB,OAAO,GAAG,MAAOC,QAAQ,IAAK;IAChCH,UAAU,CAAC,IAAI,CAAC;IAChBC,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAACoB,GAAG,CAACF,QAAQ,CAAC;MACxC,OAAOC,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVN,QAAQ,CAACM,GAAG,CAAC;MACbC,OAAO,CAACd,KAAK,CAAC,sBAAsB,EAAEa,GAAG,CAAC;MAC1C,MAAMA,GAAG;IACb,CAAC,SAAS;MACNP,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMS,OAAO,GAAG,MAAAA,CAAON,QAAQ,EAAEG,IAAI,GAAG,CAAC,CAAC,KAAK;IAC3CN,UAAU,CAAC,IAAI,CAAC;IAChBC,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAACyB,GAAG,CAACP,QAAQ,EAAEG,IAAI,CAAC;MAC9C,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVN,QAAQ,CAACM,GAAG,CAAC;MACbC,OAAO,CAACd,KAAK,CAAC,sBAAsB,EAAEa,GAAG,CAAC;MAC1C,MAAMA,GAAG;IACb,CAAC,SAAS;MACNP,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMW,QAAQ,GAAG,MAAAA,CAAOR,QAAQ,EAAEG,IAAI,KAAK;IACvCN,UAAU,CAAC,IAAI,CAAC;IAChBC,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAAC2B,IAAI,CAACT,QAAQ,EAAEG,IAAI,CAAC;MAC/C,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVN,QAAQ,CAACM,GAAG,CAAC;MACbC,OAAO,CAACd,KAAK,CAAC,qBAAqB,EAAEa,GAAG,CAAC;MACzC,MAAMA,GAAG;IACb,CAAC,SAAS;MACNP,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;;EAED;EACA,MAAMa,UAAU,GAAG,MAAOV,QAAQ,IAAK;IACnCH,UAAU,CAAC,IAAI,CAAC;IAChBC,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACA,MAAMG,QAAQ,GAAG,MAAMnB,GAAG,CAAC6B,MAAM,CAACX,QAAQ,CAAC;MAC3C,OAAOC,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVN,QAAQ,CAACM,GAAG,CAAC;MACbC,OAAO,CAACd,KAAK,CAAC,sBAAsB,EAAEa,GAAG,CAAC;MAC1C,MAAMA,GAAG;IACb,CAAC,SAAS;MACNP,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,OAAO;IACHE,OAAO;IACPS,QAAQ;IACRE,UAAU;IACVJ,OAAO;IACPV,OAAO;IACPL;EACJ,CAAC;AACL,CAAC;AAACI,EAAA,CA5EWD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}